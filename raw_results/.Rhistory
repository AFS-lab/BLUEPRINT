for (i in 1:length(unique_genes)){
#For each gene, find corresponding isoforms
goi<-two_iso[two_iso$V1==unique_genes[i],]
#find expression level of both isoforms
expression_of_isoform_1<-df[df$target_id==as.character(goi$V2[1]),]$est_counts
expression_of_isoform_2<-df[df$target_id==as.character(goi$V2[2]),]$est_counts
#If both isoforms are expressed, add gene to genes_to_keep
if (expression_of_isoform_1>2 & expression_of_isoform_2>2){
genes_to_keep[j]<-as.character(unique_genes[i])
j<-j+1
}
}
#keep only genes in genes_to_keep in two_iso
updated_two_iso<-two_iso[two_iso$V1 %in% genes_to_keep,]
#keep only isoforms in updated_two_iso in df
df<-df[df$target_id %in% updated_two_iso$V2,]
#add gene name column to df
#df<-df[order(df$target_id),]
#updated_two_iso<-updated_two_iso[order(updated_two_iso$V2)]
colnames(updated_two_iso)<-c("gene_name", "target_id")
df<-merge(df,updated_two_iso)
return(df)
}
bulk_ES<-get_two_iso("../Simulation/Kallisto_results_real_data/ERR522956/abundance.tsv")
###############################################################################
# Single cell processing
#Function which loads data, subsets it and orders it
data_processing<-function(path, filter,bulk){
results<-read.table(path)
results<-results[,colnames(results) %in% filter$Filename]
colnames(results)<-sub("sample_", "Cell", colnames(results))
colnames(results)<-sub("sample", "Cell", colnames(results))
colnames(results)<-sub("bias_","", colnames(results))
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
#Function which returns dataframe of how many isoforms are expressed
how_many_iso<-function(path_to_single_cell, filter,bulk,id) {
#Read in single cell rna seq data
single_cell<-data_processing(path_to_single_cell, filter)
#Only keep isoforms in bulk
single_cell<-single_cell[rownames(single_cell) %in% bulk$target_id,]
genes<-unique(bulk$gene_name)
no_expressed_iso<-data.frame(genes)
#For each cell
for (i in 1:ncol(single_cell)){
cell_no_expressed_iso<-vector()
#For each gene
for (j in 1:length(genes)){
isoform_1<-bulk[bulk$gene_name==as.character(genes[j]),]$target_id[1]
isoform_1<-sum(single_cell[as.character(isoform_1), i]>2)
isoform_2<-bulk[bulk$gene_name==as.character(genes[j]),]$target_id[2]
isoform_2<-sum(single_cell[as.character(isoform_2), i]>2)
cell_no_expressed_iso[j]<-isoform_1 + isoform_2
}
#Record number of expressed isoforms in dataframe
no_expressed_iso<-cbind(no_expressed_iso, cell_no_expressed_iso)
colnames(no_expressed_iso)[i+1]<-colnames(single_cell)[i]
#return(names(single_cell[,i,drop=FALSE]))
}
#Return dataframe
no_expressed_iso<-melt(no_expressed_iso)
no_expressed_iso<-cbind(no_expressed_iso, ID=rep(id, nrow(no_expressed_iso)))
return(no_expressed_iso)
}
ES_num_iso<-how_many_iso("data/clean_Kallisto_real_Counts.txt", filter_ES, bulk_ES, "ES")
write.table(ES_num_iso, "../figures/data/Figure6_number_of_isoforms.txt")
###########################################################################################
percentage<-function(numbers){
return((sum(numbers)/length(numbers)) * 100)
}
percentage_vs_expression<-function(df,path,filter,bulk,id){
#get percentage of genes expressing 2 isoforms
no_zeros<-df #[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
#get expression of each gene
single_cell<-data_processing(path,filter)
#Only keep isoforms in bulk
single_cell<-single_cell[rownames(single_cell) %in% bulk$target_id,]
new_bulk<-data.frame(bulk$target_id, bulk$gene_name)
new_bulk<-plyr::rename(new_bulk, c("bulk.target_id"= "rn", "bulk.gene_name"="genes"))
setDT(single_cell, keep.rownames = TRUE)[]
single_cell<-as.data.frame(single_cell)
single_cell<-merge(single_cell, new_bulk)
single_cell<-melt(single_cell)
expression<-single_cell %>% group_by(genes) %>% summarise(sum(log2(value+1)))
exprs_percent<-merge(expression,two_iso_percentage)
exprs_percent<-cbind(exprs_percent, ID=rep(id, nrow(exprs_percent)))
return(exprs_percent)
#ggplot(data = exprs_percent, aes(y=`sum(log2(value + 1))`,x=`percentage(value)`)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
ES_percent_exprs_plot<-percentage_vs_expression(ES_num_iso, "data/clean_Kallisto_real_Counts.txt", filter_ES, bulk_ES, "ES")
write.table(ES_percent_exprs_plot, "../figures/data/Figure_6_percent_exprs.txt")
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure10_scater_object.RData", compress="bzip2", compression_level = 9)
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv")
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
QC_raw<-QC_raw[QC_raw$Filename!='ERR522956',]
write.table(QC_raw, "../figures/data/SupplementaryFigure10_reads_alignment_data.txt")
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater)
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
library(ggplot2)
library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure11_scater_object.RData")
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Keep only filtered cells
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
write.table(QC_Sim, "../figures/data/SupplementaryFigure11_reads_alignment_data.txt")
rm(list=ls())
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
library(ggplot2)
library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Keep only filtered cells
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
#Filters applied based on plots
filter_ES<-QC_Sim[QC_Sim$Unique>5000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
rm(list=setdiff(ls(), c("filter_ES")))
################################################################################
#LOAD DATA AND PROCESS IT
#Function which loads data, subsets it and orders it
data_processing<-function(path, filter){
results<-read.table(path)
results<-results[,colnames(results) %in% filter$Filename]
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
#load data
ground_truth<-data_processing("data/clean_ground_truth_TPM.txt", filter_ES)
library(data.table)
setDT(ground_truth, keep.rownames = TRUE)[]
cells<-colnames(ground_truth)
ground_truth_expr<-ground_truth %>% gather(cells[2:ncol(ground_truth)], key="cell", value="estimates")
ground_truth_expr$estimates<-100*log2(ground_truth_expr$estimates +1)
write.table(ground_truth_expr, gzfile("../figures/data/SupplementaryFigure12.gz"))
setwd('../../../BLUEPRINT/Benchmarking_pipeline/raw_results/')
rm(list=ls())
library('splatter')
library('scran')
library('scDD')
library('pscl')
MT_reads<-function(counts_data, plates_data){
#ERCC and MT filtering
MaleB<-read.table(counts_data, header=T,row.names = 1)
MaleB<-MaleB[-grep('rRNAfiltered', names(MaleB))]
if (plates_data==TRUE){
#Load plate data
plate1<-read.table("../plate1.txt", row.names=1)
plate2<-read.table("../plate2.txt", row.names = 1)
#Function that formats plate data
make_plates<-function(counts_data){
plates<-colnames(counts_data) %in% rownames(plate1)
for (i in 1:length(plates)){
if (plates[i]==TRUE){
plates[i]<-'batch1'
}
else{
plates[i]<-'batch2'
}
}
return(plates)
}
batch<-make_plates(MaleB)
}
else{
MaleB<-MaleB[,colnames(MaleB) %in% filter_RSEM$Filename]
batch<-rep("Batch1", ncol(MaleB))
}
ids<-colnames(MaleB)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
BLUEPRINT_Bs_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(MaleB)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(BLUEPRINT_Bs_scater, "MT") <- rownames(BLUEPRINT_Bs_scater) %in% mt_isoforms
BLUEPRINT_Bs_scater_QC <- calculateQCMetrics(
BLUEPRINT_Bs_scater,
feature_controls = list(MT = isSpike(BLUEPRINT_Bs_scater, "MT"))
)
return(BLUEPRINT_Bs_scater_QC)
}
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=F)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
BLUEPRINT_QC_raw<-MT_reads("data/clean_Kallisto_real_Counts.txt", TRUE)
BLUEPRINT_QC_raw<-BLUEPRINT_QC_raw[,BLUEPRINT_QC_raw$pct_counts_MT<10]
#Filters applied based on plots
filter_RSEM<-QC_raw[QC_raw$NonUnique<350000 & QC_raw$NumReads<4000000 & QC_raw$NumAlignments< 8200000 & QC_raw$Unique<8000000,]
filter_RSEM<-filter_RSEM[filter_RSEM$Filename %in% BLUEPRINT_QC_raw$ids,]
BLUEPRINT_QC_RSEM_sim<-MT_reads("data/clean_ground_truth_counts.txt",FALSE)
BLUEPRINT_QC_RSEM_sim<-BLUEPRINT_QC_RSEM_sim[,BLUEPRINT_QC_RSEM_sim$pct_counts_MT<10]
filter_RSEM<-filter_RSEM[filter_RSEM$Filename %in% BLUEPRINT_QC_RSEM_sim$ids,]
#Read in QC statistics files
QC_sim_poly<-read.csv("../Polyester_Simulations/raw_results/data/simulated/read_alignment_qc.csv", header=F)
names(QC_sim_poly)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
filter_bias<-QC_sim_poly[grep('bias', QC_sim_poly$Filename),]
filter_bias<-filter_bias[filter_bias$NonUnique<250000,]
filter_unbias<-QC_sim_poly[grep('sample[0-9]', QC_sim_poly$Filename),]
filter_unbias<-filter_unbias[filter_unbias$NonUnique<250000,]
#remove unneeded objects
rm(list=setdiff(ls(), c("filter_RSEM", "filter_bias", "filter_unbias")))
###############################################################################
# FUNCTIONS USED BY get_statistics_for_ggplot
#Function which loads data, subsets it and orders it
data_processing<-function(path, filter){
results<-read.table(path)
results<-results[,colnames(results) %in% filter$Filename]
colnames(results)<-sub("bias","", colnames(results))
colnames(results)<-sub("sample", "Cell", colnames(results))
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
#Change so load Salmon SMEM counts
#Load Kallisto estimated counts from real data
Kallisto_real_data<-data_processing("data/clean_Kallisto_real_Counts.txt", filter_RSEM)
#Load RSEM simulation counts data
RSEM<-data_processing("data/clean_ground_truth_counts.txt", filter_RSEM)
#Load plate data
plate1<-read.table("../plate1.txt", row.names=1)
plate2<-read.table("../plate2.txt", row.names = 1)
load("../Bs_zeros_removed_25_09_param")
#Function that formats plate data
make_plates<-function(counts_data){
plates<-colnames(counts_data) %in% rownames(plate1)
for (i in 1:length(plates)){
if (plates[i]==TRUE){
plates[i]<-'positive'
}
else{
plates[i]<-'negative'
}
}
return(plates)
}
#Function that formats conditions data
make_conditions<-function(counts_data){
conditions<-colnames(counts_data) %in% colnames(MaleT)
for (i in 1:length(conditions)){
if (conditions[i]==TRUE){
conditions[i]<-1
} else {
conditions[i]<-2
}
}
return(conditions)
}
#Function that makes SCEset objects
make_SCE<-function(counts_data){
#Make phenodata
Cell<-colnames(counts_data)
Plate<-make_plates(counts_data)
pd<-data.frame(Cell,Plate)
#Then make SCESet Object
rownames(pd) <- pd$Cell
BLUEPRINT_Bs_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(counts_data)),
colData = pd
)
return(BLUEPRINT_Bs_scater)
}
simpleParams<-simpleEstimate(data.matrix(Kallisto_real_data, rownames.force=TRUE))
simplesim<-simpleSimulate(simpleParams)
#Perform Lun simulation
lunParams<-lunEstimate(data.matrix(Kallisto_real_data, rownames.force=TRUE))
lunsim<-lunSimulate(lunParams)
lun2sim<-lun2Simulate(lun2Params)
save(simplesim, file="../figures/data/SupplementaryFigure5_simplesim.Rdata")
save(lunsim, file="../figures/data/SupplementaryFigure5_lunsim.Rdata")
save(lun2sim, file="../figures/data/SupplementaryFigure5_lun2sim.Rdata")
RSEM<-make_SCE(RSEM)
save(RSEM, file="../figures/data/SupplementaryFigure5_RSEM.Rdata")
Kallisto<-make_SCE(Kallisto_real_data)
save(Kallisto, file="../figures/data/SupplementaryFigure5_Kallisto.Rdata")
